package types

import (
	sdkErrors "github.com/cosmos/cosmos-sdk/types/errors"
)

var (
	DefaultCodespace = ModuleName

	ErrArgumentCannotBeEmpty                = sdkErrors.Register(DefaultCodespace, 301, " argument cannot be empty")
	ErrArgumentCannotBeNegative             = sdkErrors.Register(DefaultCodespace, 301, "argument cannot be negative")
	ErrArgumentMustBePositive               = sdkErrors.Register(DefaultCodespace, 301, "argument must be a positive value")
	ErrArgumentMustBeInteger                = sdkErrors.Register(DefaultCodespace, 301, "argument must be an integer value")
	ErrArgumentMustBeBetween                = sdkErrors.Register(DefaultCodespace, 301, "\"%s argument must be between %s and %s\", arg, a, b")
	ErrFunctionParameterMissingOrNonFloat   = sdkErrors.Register(DefaultCodespace, 301, "parameter is missing or is not a float")
	ErrArgumentMissingOrNonFloat            = sdkErrors.Register(DefaultCodespace, 302, "argument is missing or is not a float")
	ErrArgumentMissingOrNonUInteger         = sdkErrors.Register(DefaultCodespace, 302, " argument is missing or is not an unsigned integer")
	ErrArgumentMissingOrNonBoolean          = sdkErrors.Register(DefaultCodespace, 302, "argument is missing or is not true or false")
	ErrIncorrectNumberOfReserveTokens       = sdkErrors.Register(DefaultCodespace, 303, "Incorrect number of reserve tokens")
	ErrIncorrectNumberOfFunctionParameters  = sdkErrors.Register(DefaultCodespace, 303, "Incorrect number of function parameters")
	ErrBondDoesNotExist                     = sdkErrors.Register(DefaultCodespace, 305, "Bond  does not exist")
	ErrBondAlreadyExists                    = sdkErrors.Register(DefaultCodespace, 306, "Bond  already exists")
	ErrBondTokenIsTaken                     = sdkErrors.Register(DefaultCodespace, 306, "Bond token is taken")
	ErrBondDoesNotAllowSelling              = sdkErrors.Register(DefaultCodespace, 307, "Bond does not allow selling at the moment")
	ErrDidNotEditAnything                   = sdkErrors.Register(DefaultCodespace, 308, "Bond does not allow selling at the moment")
	ErrFromAndToCannotBeTheSameToken        = sdkErrors.Register(DefaultCodespace, 309, "From and To tokens cannot be the same token")
	ErrDuplicateReserveToken                = sdkErrors.Register(DefaultCodespace, 310, "Cannot have duplicate tokens in reserve tokens")
	ErrInvalidStateForAction                = sdkErrors.Register(DefaultCodespace, 311, "Cannot perform that action at the current state")
	ErrUnrecognizedFunctionType             = sdkErrors.Register(DefaultCodespace, 312, "Unrecognized function type")
	ErrInvalidFunctionParameter             = sdkErrors.Register(DefaultCodespace, 312, "Invalid function parameter")
	ErrFunctionNotAvailableForFunctionType  = sdkErrors.Register(DefaultCodespace, 314, "Function is not available for the function type")
	ErrCannotMakeZeroOutcomePayment         = sdkErrors.Register(DefaultCodespace, 304, "Cannot make outcome payment because outcome payment is set to nil")
	ErrFunctionRequiresNonZeroCurrentSupply = sdkErrors.Register(DefaultCodespace, 316, "Function requires the current supply to be non zero")
	ErrTokenIsNotAValidReserveToken         = sdkErrors.Register(DefaultCodespace, 316, "Token is not a valid reserve token")
	ErrMaxSupplyDenomDoesNotMatchTokenDenom = sdkErrors.Register(DefaultCodespace, 317, "Token is not a valid reserve token")
	ErrBondTokenCannotAlsoBeReserveToken    = sdkErrors.Register(DefaultCodespace, 318, "Token cannot also be a reserve token")
	ErrBondTokenCannotBeStakingToken        = sdkErrors.Register(DefaultCodespace, 318, "Bond token cannot be staking token")
	ErrReserveDenomsMismatch                = sdkErrors.Register(DefaultCodespace, 319, "Denoms in do not match reserve denoms")
	ErrInvalidCoinDenomination              = sdkErrors.Register(DefaultCodespace, 320, "Invalid coin denomination ")
	ErrCannotMintMoreThanMaxSupply          = sdkErrors.Register(DefaultCodespace, 321, "Cannot mint more tokens than the max supply")
	ErrCannotBurnMoreThanSupply             = sdkErrors.Register(DefaultCodespace, 321, "Cannot burn more tokens than the current supply")
	ErrMaxPriceExceeded                     = sdkErrors.Register(DefaultCodespace, 322, "Actual prices  exceed max prices ")
	ErrSwapAmountTooSmallToGiveAnyReturn    = sdkErrors.Register(DefaultCodespace, 323, "swap amount too small to give any return")
	ErrSwapAmountCausesReserveDepletion     = sdkErrors.Register(DefaultCodespace, 323, "swap amount too large and causes  reserve to be depleted")
	ErrOrderQuantityLimitExceeded           = sdkErrors.Register(DefaultCodespace, 324, "Order quantity limits exceeded")
	ErrValuesViolateSanityRate              = sdkErrors.Register(DefaultCodespace, 325, "Values violate sanity rate")
	ErrFeesCannotBeOrExceed100Percent       = sdkErrors.Register(DefaultCodespace, 326, "Sum of fees is or exceeds 100 percent")
	ErrNoBondTokensOwned                    = sdkErrors.Register(DefaultCodespace, 326, "No bond tokens of this bond are owned")
	ErrInsufficientReserveToBuy             = sdkErrors.Register(DefaultCodespace, 328, "Insufficient reserve was supplied to perform buy order")
	ErrInternal                             = sdkErrors.Register(DefaultCodespace, 329, "internal error")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bonds/bonds.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FunctionParam struct {
	Param string                                 `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
	Value github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=value,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"value"`
}

func (m *FunctionParam) Reset()         { *m = FunctionParam{} }
func (m *FunctionParam) String() string { return proto.CompactTextString(m) }
func (*FunctionParam) ProtoMessage()    {}
func (*FunctionParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{0}
}
func (m *FunctionParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FunctionParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FunctionParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FunctionParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionParam.Merge(m, src)
}
func (m *FunctionParam) XXX_Size() int {
	return m.Size()
}
func (m *FunctionParam) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionParam.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionParam proto.InternalMessageInfo

func (m *FunctionParam) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

type QueryBonds struct {
	Bonds []string `protobuf:"bytes,1,rep,name=bonds,proto3" json:"bonds,omitempty"`
}

func (m *QueryBonds) Reset()         { *m = QueryBonds{} }
func (m *QueryBonds) String() string { return proto.CompactTextString(m) }
func (*QueryBonds) ProtoMessage()    {}
func (*QueryBonds) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{1}
}
func (m *QueryBonds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBonds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBonds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBonds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBonds.Merge(m, src)
}
func (m *QueryBonds) XXX_Size() int {
	return m.Size()
}
func (m *QueryBonds) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBonds.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBonds proto.InternalMessageInfo

func (m *QueryBonds) GetBonds() []string {
	if m != nil {
		return m.Bonds
	}
	return nil
}

type BondsDetailed struct {
	BondDid   string                                 `protobuf:"bytes,1,opt,name=bond_did,json=bondDid,proto3" json:"bond_did,omitempty"`
	SpotPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=spot_price,json=spotPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"spot_price"`
	Supply    *types.Coin                            `protobuf:"bytes,3,opt,name=supply,proto3" json:"supply,omitempty"`
	Reserve   []*types.Coin                          `protobuf:"bytes,4,rep,name=reserve,proto3" json:"reserve,omitempty"`
}

func (m *BondsDetailed) Reset()         { *m = BondsDetailed{} }
func (m *BondsDetailed) String() string { return proto.CompactTextString(m) }
func (*BondsDetailed) ProtoMessage()    {}
func (*BondsDetailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{2}
}
func (m *BondsDetailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondsDetailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondsDetailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondsDetailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondsDetailed.Merge(m, src)
}
func (m *BondsDetailed) XXX_Size() int {
	return m.Size()
}
func (m *BondsDetailed) XXX_DiscardUnknown() {
	xxx_messageInfo_BondsDetailed.DiscardUnknown(m)
}

var xxx_messageInfo_BondsDetailed proto.InternalMessageInfo

func (m *BondsDetailed) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

func (m *BondsDetailed) GetSupply() *types.Coin {
	if m != nil {
		return m.Supply
	}
	return nil
}

func (m *BondsDetailed) GetReserve() []*types.Coin {
	if m != nil {
		return m.Reserve
	}
	return nil
}

type QueryBondsDetailed struct {
	BondsDetailed []*BondsDetailed `protobuf:"bytes,1,rep,name=bonds_detailed,json=bondsDetailed,proto3" json:"bonds_detailed,omitempty"`
}

func (m *QueryBondsDetailed) Reset()         { *m = QueryBondsDetailed{} }
func (m *QueryBondsDetailed) String() string { return proto.CompactTextString(m) }
func (*QueryBondsDetailed) ProtoMessage()    {}
func (*QueryBondsDetailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{3}
}
func (m *QueryBondsDetailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBondsDetailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBondsDetailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBondsDetailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBondsDetailed.Merge(m, src)
}
func (m *QueryBondsDetailed) XXX_Size() int {
	return m.Size()
}
func (m *QueryBondsDetailed) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBondsDetailed.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBondsDetailed proto.InternalMessageInfo

func (m *QueryBondsDetailed) GetBondsDetailed() []*BondsDetailed {
	if m != nil {
		return m.BondsDetailed
	}
	return nil
}

type Bond struct {
	Token                        string                                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Name                         string                                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description                  string                                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	CreatorDid                   string                                 `protobuf:"bytes,4,opt,name=creator_did,json=creatorDid,proto3" json:"creator_did,omitempty"`
	ControllerDid                string                                 `protobuf:"bytes,5,opt,name=controller_did,json=controllerDid,proto3" json:"controller_did,omitempty"`
	FunctionType                 string                                 `protobuf:"bytes,6,opt,name=function_type,json=functionType,proto3" json:"function_type,omitempty"`
	FunctionParameters           []*FunctionParam                       `protobuf:"bytes,7,rep,name=function_parameters,json=functionParameters,proto3" json:"function_parameters,omitempty"`
	ReserveTokens                []string                               `protobuf:"bytes,8,rep,name=reserve_tokens,json=reserveTokens,proto3" json:"reserve_tokens,omitempty"`
	TxFeePercentage              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=tx_fee_percentage,json=txFeePercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"tx_fee_percentage"`
	ExitFeePercentage            github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=exit_fee_percentage,json=exitFeePercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"exit_fee_percentage"`
	FeeAddress                   string                                 `protobuf:"bytes,11,opt,name=fee_address,json=feeAddress,proto3" json:"fee_address,omitempty"`
	MaxSupply                    *types.Coin                            `protobuf:"bytes,12,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty"`
	OrderQuantityLimits          []*types.Coin                          `protobuf:"bytes,13,rep,name=order_quantity_limits,json=orderQuantityLimits,proto3" json:"order_quantity_limits,omitempty"`
	SanityRate                   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,14,opt,name=sanity_rate,json=sanityRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"sanity_rate"`
	SanityMarginPercentage       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,15,opt,name=sanity_margin_percentage,json=sanityMarginPercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"sanity_margin_percentage"`
	CurrentSupply                *types.Coin                            `protobuf:"bytes,16,opt,name=current_supply,json=currentSupply,proto3" json:"current_supply,omitempty"`
	CurrentReserve               []*types.Coin                          `protobuf:"bytes,17,rep,name=current_reserve,json=currentReserve,proto3" json:"current_reserve,omitempty"`
	CurrentOutcomePaymentReserve []*types.Coin                          `protobuf:"bytes,18,rep,name=current_outcome_payment_reserve,json=currentOutcomePaymentReserve,proto3" json:"current_outcome_payment_reserve,omitempty"`
	AllowSells                   bool                                   `protobuf:"varint,19,opt,name=allow_sells,json=allowSells,proto3" json:"allow_sells,omitempty"`
	AlphaBond                    bool                                   `protobuf:"varint,20,opt,name=alpha_bond,json=alphaBond,proto3" json:"alpha_bond,omitempty"`
	BatchBlocks                  uint64                                 `protobuf:"varint,21,opt,name=batch_blocks,json=batchBlocks,proto3" json:"batch_blocks,omitempty"`
	OutcomePayment               int64                                  `protobuf:"varint,22,opt,name=outcome_payment,json=outcomePayment,proto3" json:"outcome_payment,omitempty"`
	State                        string                                 `protobuf:"bytes,23,opt,name=state,proto3" json:"state,omitempty"`
	BondDid                      string                                 `protobuf:"bytes,24,opt,name=bond_did,json=bondDid,proto3" json:"bond_did,omitempty"`
}

func (m *Bond) Reset()         { *m = Bond{} }
func (m *Bond) String() string { return proto.CompactTextString(m) }
func (*Bond) ProtoMessage()    {}
func (*Bond) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{4}
}
func (m *Bond) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bond.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bond.Merge(m, src)
}
func (m *Bond) XXX_Size() int {
	return m.Size()
}
func (m *Bond) XXX_DiscardUnknown() {
	xxx_messageInfo_Bond.DiscardUnknown(m)
}

var xxx_messageInfo_Bond proto.InternalMessageInfo

func (m *Bond) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Bond) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Bond) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Bond) GetCreatorDid() string {
	if m != nil {
		return m.CreatorDid
	}
	return ""
}

func (m *Bond) GetControllerDid() string {
	if m != nil {
		return m.ControllerDid
	}
	return ""
}

func (m *Bond) GetFunctionType() string {
	if m != nil {
		return m.FunctionType
	}
	return ""
}

func (m *Bond) GetFunctionParameters() []*FunctionParam {
	if m != nil {
		return m.FunctionParameters
	}
	return nil
}

func (m *Bond) GetReserveTokens() []string {
	if m != nil {
		return m.ReserveTokens
	}
	return nil
}

func (m *Bond) GetFeeAddress() string {
	if m != nil {
		return m.FeeAddress
	}
	return ""
}

func (m *Bond) GetMaxSupply() *types.Coin {
	if m != nil {
		return m.MaxSupply
	}
	return nil
}

func (m *Bond) GetOrderQuantityLimits() []*types.Coin {
	if m != nil {
		return m.OrderQuantityLimits
	}
	return nil
}

func (m *Bond) GetCurrentSupply() *types.Coin {
	if m != nil {
		return m.CurrentSupply
	}
	return nil
}

func (m *Bond) GetCurrentReserve() []*types.Coin {
	if m != nil {
		return m.CurrentReserve
	}
	return nil
}

func (m *Bond) GetCurrentOutcomePaymentReserve() []*types.Coin {
	if m != nil {
		return m.CurrentOutcomePaymentReserve
	}
	return nil
}

func (m *Bond) GetAllowSells() bool {
	if m != nil {
		return m.AllowSells
	}
	return false
}

func (m *Bond) GetAlphaBond() bool {
	if m != nil {
		return m.AlphaBond
	}
	return false
}

func (m *Bond) GetBatchBlocks() uint64 {
	if m != nil {
		return m.BatchBlocks
	}
	return 0
}

func (m *Bond) GetOutcomePayment() int64 {
	if m != nil {
		return m.OutcomePayment
	}
	return 0
}

func (m *Bond) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Bond) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

type BaseOrder struct {
	AccountDid   string      `protobuf:"bytes,1,opt,name=account_did,json=accountDid,proto3" json:"account_did,omitempty"`
	Amount       *types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Cancelled    bool        `protobuf:"varint,3,opt,name=cancelled,proto3" json:"cancelled,omitempty"`
	CancelReason string      `protobuf:"bytes,4,opt,name=cancel_reason,json=cancelReason,proto3" json:"cancel_reason,omitempty"`
}

func (m *BaseOrder) Reset()         { *m = BaseOrder{} }
func (m *BaseOrder) String() string { return proto.CompactTextString(m) }
func (*BaseOrder) ProtoMessage()    {}
func (*BaseOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{5}
}
func (m *BaseOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseOrder.Merge(m, src)
}
func (m *BaseOrder) XXX_Size() int {
	return m.Size()
}
func (m *BaseOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseOrder.DiscardUnknown(m)
}

var xxx_messageInfo_BaseOrder proto.InternalMessageInfo

func (m *BaseOrder) GetAccountDid() string {
	if m != nil {
		return m.AccountDid
	}
	return ""
}

func (m *BaseOrder) GetAmount() *types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *BaseOrder) GetCancelled() bool {
	if m != nil {
		return m.Cancelled
	}
	return false
}

func (m *BaseOrder) GetCancelReason() string {
	if m != nil {
		return m.CancelReason
	}
	return ""
}

type BuyOrder struct {
	BaseOrder *BaseOrder    `protobuf:"bytes,1,opt,name=base_order,json=baseOrder,proto3" json:"base_order,omitempty"`
	MaxPrices []*types.Coin `protobuf:"bytes,2,rep,name=max_prices,json=maxPrices,proto3" json:"max_prices,omitempty"`
}

func (m *BuyOrder) Reset()         { *m = BuyOrder{} }
func (m *BuyOrder) String() string { return proto.CompactTextString(m) }
func (*BuyOrder) ProtoMessage()    {}
func (*BuyOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{6}
}
func (m *BuyOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuyOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyOrder.Merge(m, src)
}
func (m *BuyOrder) XXX_Size() int {
	return m.Size()
}
func (m *BuyOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyOrder.DiscardUnknown(m)
}

var xxx_messageInfo_BuyOrder proto.InternalMessageInfo

func (m *BuyOrder) GetBaseOrder() *BaseOrder {
	if m != nil {
		return m.BaseOrder
	}
	return nil
}

func (m *BuyOrder) GetMaxPrices() []*types.Coin {
	if m != nil {
		return m.MaxPrices
	}
	return nil
}

type SellOrder struct {
	BaseOrder *BaseOrder `protobuf:"bytes,1,opt,name=base_order,json=baseOrder,proto3" json:"base_order,omitempty"`
}

func (m *SellOrder) Reset()         { *m = SellOrder{} }
func (m *SellOrder) String() string { return proto.CompactTextString(m) }
func (*SellOrder) ProtoMessage()    {}
func (*SellOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{7}
}
func (m *SellOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SellOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SellOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SellOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SellOrder.Merge(m, src)
}
func (m *SellOrder) XXX_Size() int {
	return m.Size()
}
func (m *SellOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_SellOrder.DiscardUnknown(m)
}

var xxx_messageInfo_SellOrder proto.InternalMessageInfo

func (m *SellOrder) GetBaseOrder() *BaseOrder {
	if m != nil {
		return m.BaseOrder
	}
	return nil
}

type SwapOrder struct {
	BaseOrder *BaseOrder `protobuf:"bytes,1,opt,name=base_order,json=baseOrder,proto3" json:"base_order,omitempty"`
	ToToken   string     `protobuf:"bytes,2,opt,name=to_token,json=toToken,proto3" json:"to_token,omitempty"`
}

func (m *SwapOrder) Reset()         { *m = SwapOrder{} }
func (m *SwapOrder) String() string { return proto.CompactTextString(m) }
func (*SwapOrder) ProtoMessage()    {}
func (*SwapOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{8}
}
func (m *SwapOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapOrder.Merge(m, src)
}
func (m *SwapOrder) XXX_Size() int {
	return m.Size()
}
func (m *SwapOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapOrder.DiscardUnknown(m)
}

var xxx_messageInfo_SwapOrder proto.InternalMessageInfo

func (m *SwapOrder) GetBaseOrder() *BaseOrder {
	if m != nil {
		return m.BaseOrder
	}
	return nil
}

func (m *SwapOrder) GetToToken() string {
	if m != nil {
		return m.ToToken
	}
	return ""
}

type Batch struct {
	BondDid         string                                 `protobuf:"bytes,1,opt,name=bond_did,json=bondDid,proto3" json:"bond_did,omitempty"`
	BlocksRemaining uint64                                 `protobuf:"varint,2,opt,name=blocks_remaining,json=blocksRemaining,proto3" json:"blocks_remaining,omitempty"`
	NextPublicAlpha github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=next_public_alpha,json=nextPublicAlpha,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"next_public_alpha"`
	TotalBuyAmount  *types.Coin                            `protobuf:"bytes,4,opt,name=total_buy_amount,json=totalBuyAmount,proto3" json:"total_buy_amount,omitempty"`
	TotalSellAmount *types.Coin                            `protobuf:"bytes,5,opt,name=total_sell_amount,json=totalSellAmount,proto3" json:"total_sell_amount,omitempty"`
	BuyPrices       []*types.Coin                          `protobuf:"bytes,6,rep,name=buy_prices,json=buyPrices,proto3" json:"buy_prices,omitempty"`
	SellPrices      []*types.Coin                          `protobuf:"bytes,7,rep,name=sell_prices,json=sellPrices,proto3" json:"sell_prices,omitempty"`
	Buys            []*BuyOrder                            `protobuf:"bytes,8,rep,name=buys,proto3" json:"buys,omitempty"`
	Sells           []*SellOrder                           `protobuf:"bytes,9,rep,name=sells,proto3" json:"sells,omitempty"`
	Swap            []*SwapOrder                           `protobuf:"bytes,10,rep,name=swap,proto3" json:"swap,omitempty"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{9}
}
func (m *Batch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(m, src)
}
func (m *Batch) XXX_Size() int {
	return m.Size()
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

func (m *Batch) GetBlocksRemaining() uint64 {
	if m != nil {
		return m.BlocksRemaining
	}
	return 0
}

func (m *Batch) GetTotalBuyAmount() *types.Coin {
	if m != nil {
		return m.TotalBuyAmount
	}
	return nil
}

func (m *Batch) GetTotalSellAmount() *types.Coin {
	if m != nil {
		return m.TotalSellAmount
	}
	return nil
}

func (m *Batch) GetBuyPrices() []*types.Coin {
	if m != nil {
		return m.BuyPrices
	}
	return nil
}

func (m *Batch) GetSellPrices() []*types.Coin {
	if m != nil {
		return m.SellPrices
	}
	return nil
}

func (m *Batch) GetBuys() []*BuyOrder {
	if m != nil {
		return m.Buys
	}
	return nil
}

func (m *Batch) GetSells() []*SellOrder {
	if m != nil {
		return m.Sells
	}
	return nil
}

func (m *Batch) GetSwap() []*SwapOrder {
	if m != nil {
		return m.Swap
	}
	return nil
}

type QueryBuyPrice struct {
	AdjustedSupply *types.Coin   `protobuf:"bytes,1,opt,name=adjusted_supply,json=adjustedSupply,proto3" json:"adjusted_supply,omitempty"`
	Prices         []*types.Coin `protobuf:"bytes,2,rep,name=prices,proto3" json:"prices,omitempty"`
	TxFees         []*types.Coin `protobuf:"bytes,3,rep,name=tx_fees,json=txFees,proto3" json:"tx_fees,omitempty"`
	TotalPrices    []*types.Coin `protobuf:"bytes,4,rep,name=total_prices,json=totalPrices,proto3" json:"total_prices,omitempty"`
	TotalFees      []*types.Coin `protobuf:"bytes,5,rep,name=total_fees,json=totalFees,proto3" json:"total_fees,omitempty"`
}

func (m *QueryBuyPrice) Reset()         { *m = QueryBuyPrice{} }
func (m *QueryBuyPrice) String() string { return proto.CompactTextString(m) }
func (*QueryBuyPrice) ProtoMessage()    {}
func (*QueryBuyPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{10}
}
func (m *QueryBuyPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuyPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuyPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuyPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuyPrice.Merge(m, src)
}
func (m *QueryBuyPrice) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuyPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuyPrice.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuyPrice proto.InternalMessageInfo

func (m *QueryBuyPrice) GetAdjustedSupply() *types.Coin {
	if m != nil {
		return m.AdjustedSupply
	}
	return nil
}

func (m *QueryBuyPrice) GetPrices() []*types.Coin {
	if m != nil {
		return m.Prices
	}
	return nil
}

func (m *QueryBuyPrice) GetTxFees() []*types.Coin {
	if m != nil {
		return m.TxFees
	}
	return nil
}

func (m *QueryBuyPrice) GetTotalPrices() []*types.Coin {
	if m != nil {
		return m.TotalPrices
	}
	return nil
}

func (m *QueryBuyPrice) GetTotalFees() []*types.Coin {
	if m != nil {
		return m.TotalFees
	}
	return nil
}

type QuerySellReturn struct {
	AdjustedSupply *types.Coin   `protobuf:"bytes,1,opt,name=adjusted_supply,json=adjustedSupply,proto3" json:"adjusted_supply,omitempty"`
	Returns        []*types.Coin `protobuf:"bytes,2,rep,name=returns,proto3" json:"returns,omitempty"`
	TxFees         []*types.Coin `protobuf:"bytes,3,rep,name=tx_fees,json=txFees,proto3" json:"tx_fees,omitempty"`
	ExitFees       []*types.Coin `protobuf:"bytes,4,rep,name=exit_fees,json=exitFees,proto3" json:"exit_fees,omitempty"`
	TotalReturns   []*types.Coin `protobuf:"bytes,5,rep,name=total_returns,json=totalReturns,proto3" json:"total_returns,omitempty"`
	TotalFees      []*types.Coin `protobuf:"bytes,6,rep,name=total_fees,json=totalFees,proto3" json:"total_fees,omitempty"`
}

func (m *QuerySellReturn) Reset()         { *m = QuerySellReturn{} }
func (m *QuerySellReturn) String() string { return proto.CompactTextString(m) }
func (*QuerySellReturn) ProtoMessage()    {}
func (*QuerySellReturn) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{11}
}
func (m *QuerySellReturn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySellReturn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySellReturn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySellReturn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySellReturn.Merge(m, src)
}
func (m *QuerySellReturn) XXX_Size() int {
	return m.Size()
}
func (m *QuerySellReturn) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySellReturn.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySellReturn proto.InternalMessageInfo

func (m *QuerySellReturn) GetAdjustedSupply() *types.Coin {
	if m != nil {
		return m.AdjustedSupply
	}
	return nil
}

func (m *QuerySellReturn) GetReturns() []*types.Coin {
	if m != nil {
		return m.Returns
	}
	return nil
}

func (m *QuerySellReturn) GetTxFees() []*types.Coin {
	if m != nil {
		return m.TxFees
	}
	return nil
}

func (m *QuerySellReturn) GetExitFees() []*types.Coin {
	if m != nil {
		return m.ExitFees
	}
	return nil
}

func (m *QuerySellReturn) GetTotalReturns() []*types.Coin {
	if m != nil {
		return m.TotalReturns
	}
	return nil
}

func (m *QuerySellReturn) GetTotalFees() []*types.Coin {
	if m != nil {
		return m.TotalFees
	}
	return nil
}

type QuerySwapReturn struct {
	TotalReturns *types.Coin   `protobuf:"bytes,1,opt,name=total_returns,json=totalReturns,proto3" json:"total_returns,omitempty"`
	TotalFees    []*types.Coin `protobuf:"bytes,2,rep,name=total_fees,json=totalFees,proto3" json:"total_fees,omitempty"`
}

func (m *QuerySwapReturn) Reset()         { *m = QuerySwapReturn{} }
func (m *QuerySwapReturn) String() string { return proto.CompactTextString(m) }
func (*QuerySwapReturn) ProtoMessage()    {}
func (*QuerySwapReturn) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{12}
}
func (m *QuerySwapReturn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySwapReturn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySwapReturn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySwapReturn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySwapReturn.Merge(m, src)
}
func (m *QuerySwapReturn) XXX_Size() int {
	return m.Size()
}
func (m *QuerySwapReturn) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySwapReturn.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySwapReturn proto.InternalMessageInfo

func (m *QuerySwapReturn) GetTotalReturns() *types.Coin {
	if m != nil {
		return m.TotalReturns
	}
	return nil
}

func (m *QuerySwapReturn) GetTotalFees() []*types.Coin {
	if m != nil {
		return m.TotalFees
	}
	return nil
}

type QueryAlphaMaximums struct {
	MaxSystemAlphaIncrease github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=max_system_alpha_increase,json=maxSystemAlphaIncrease,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_system_alpha_increase"`
	MaxSystemAlpha         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=max_system_alpha,json=maxSystemAlpha,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_system_alpha"`
}

func (m *QueryAlphaMaximums) Reset()         { *m = QueryAlphaMaximums{} }
func (m *QueryAlphaMaximums) String() string { return proto.CompactTextString(m) }
func (*QueryAlphaMaximums) ProtoMessage()    {}
func (*QueryAlphaMaximums) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{13}
}
func (m *QueryAlphaMaximums) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAlphaMaximums) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAlphaMaximums.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAlphaMaximums) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAlphaMaximums.Merge(m, src)
}
func (m *QueryAlphaMaximums) XXX_Size() int {
	return m.Size()
}
func (m *QueryAlphaMaximums) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAlphaMaximums.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAlphaMaximums proto.InternalMessageInfo

type Params struct {
	ReservedBondTokens []string `protobuf:"bytes,1,rep,name=reserved_bond_tokens,json=reservedBondTokens,proto3" json:"reserved_bond_tokens,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{14}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetReservedBondTokens() []string {
	if m != nil {
		return m.ReservedBondTokens
	}
	return nil
}

func init() {
	proto.RegisterType((*FunctionParam)(nil), "bonds.FunctionParam")
	proto.RegisterType((*QueryBonds)(nil), "bonds.QueryBonds")
	proto.RegisterType((*BondsDetailed)(nil), "bonds.BondsDetailed")
	proto.RegisterType((*QueryBondsDetailed)(nil), "bonds.QueryBondsDetailed")
	proto.RegisterType((*Bond)(nil), "bonds.Bond")
	proto.RegisterType((*BaseOrder)(nil), "bonds.BaseOrder")
	proto.RegisterType((*BuyOrder)(nil), "bonds.BuyOrder")
	proto.RegisterType((*SellOrder)(nil), "bonds.SellOrder")
	proto.RegisterType((*SwapOrder)(nil), "bonds.SwapOrder")
	proto.RegisterType((*Batch)(nil), "bonds.Batch")
	proto.RegisterType((*QueryBuyPrice)(nil), "bonds.QueryBuyPrice")
	proto.RegisterType((*QuerySellReturn)(nil), "bonds.QuerySellReturn")
	proto.RegisterType((*QuerySwapReturn)(nil), "bonds.QuerySwapReturn")
	proto.RegisterType((*QueryAlphaMaximums)(nil), "bonds.QueryAlphaMaximums")
	proto.RegisterType((*Params)(nil), "bonds.Params")
}

func init() { proto.RegisterFile("bonds/bonds.proto", fileDescriptor_2aec84d2b0c1db90) }

var fileDescriptor_2aec84d2b0c1db90 = []byte{
	// 1411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xc1, 0x6e, 0xdb, 0x46,
	0x13, 0x36, 0x6d, 0x49, 0x36, 0x47, 0x96, 0x65, 0xaf, 0x9d, 0xfc, 0x74, 0x90, 0x5f, 0xd6, 0xcf,
	0xfc, 0x7f, 0x7e, 0xf7, 0x10, 0xa9, 0x76, 0x80, 0x22, 0x48, 0x83, 0xa0, 0x51, 0x9c, 0x00, 0x05,
	0x6a, 0xc4, 0x61, 0x02, 0x34, 0xc8, 0xa1, 0xec, 0x8a, 0x5c, 0xdb, 0xac, 0x49, 0x2e, 0xcb, 0x5d,
	0xc6, 0xd2, 0x33, 0xf4, 0xd2, 0x27, 0xe8, 0xa1, 0x8f, 0xd0, 0xa7, 0xc8, 0x31, 0xc7, 0xb6, 0x87,
	0xa0, 0x4d, 0x5e, 0xa0, 0x40, 0x5f, 0xa0, 0xd8, 0xd9, 0xa5, 0x23, 0xa5, 0x80, 0x19, 0x0b, 0xbd,
	0xd8, 0xda, 0xd9, 0x99, 0x6f, 0x66, 0xbf, 0x19, 0xce, 0xce, 0xc2, 0xda, 0x90, 0xa7, 0xa1, 0xe8,
	0xe3, 0xdf, 0x5e, 0x96, 0x73, 0xc9, 0x49, 0x1d, 0x17, 0x57, 0x36, 0x8e, 0xf8, 0x11, 0x47, 0x49,
	0x5f, 0xfd, 0xd2, 0x9b, 0x57, 0x3a, 0x01, 0x17, 0x09, 0x17, 0xfd, 0x21, 0x15, 0xac, 0xff, 0x62,
	0x67, 0xc8, 0x24, 0xdd, 0xe9, 0x07, 0x3c, 0x4a, 0xf5, 0xbe, 0x7b, 0x02, 0xad, 0x87, 0x45, 0x1a,
	0xc8, 0x88, 0xa7, 0x07, 0x34, 0xa7, 0x09, 0xd9, 0x80, 0x7a, 0xa6, 0x7e, 0x38, 0x56, 0xd7, 0xda,
	0xb6, 0x3d, 0xbd, 0x20, 0x7b, 0x50, 0x7f, 0x41, 0xe3, 0x82, 0x39, 0xf3, 0x4a, 0x3a, 0xe8, 0xbd,
	0x7c, 0xbd, 0x35, 0xf7, 0xeb, 0xeb, 0xad, 0xeb, 0x47, 0x91, 0x3c, 0x2e, 0x86, 0xbd, 0x80, 0x27,
	0x7d, 0xe3, 0x48, 0xff, 0xbb, 0x21, 0xc2, 0x93, 0xbe, 0x1c, 0x67, 0x4c, 0xf4, 0xf6, 0x58, 0xe0,
	0x69, 0x63, 0xd7, 0x05, 0x78, 0x5c, 0xb0, 0x7c, 0x3c, 0x50, 0x01, 0x2b, 0x4f, 0x18, 0xb9, 0x63,
	0x75, 0x17, 0x94, 0x27, 0x5c, 0xb8, 0xbf, 0x5b, 0xd0, 0xc2, 0xfd, 0x3d, 0x26, 0x69, 0x14, 0xb3,
	0x90, 0x6c, 0xc2, 0x92, 0xda, 0xf2, 0xc3, 0x28, 0x34, 0x41, 0x2d, 0xaa, 0xf5, 0x5e, 0x14, 0x92,
	0x7d, 0x00, 0x91, 0x71, 0xe9, 0x67, 0x79, 0x14, 0xcc, 0x1a, 0x9b, 0xad, 0x10, 0x0e, 0x14, 0x00,
	0xd9, 0x81, 0x86, 0x28, 0xb2, 0x2c, 0x1e, 0x3b, 0x0b, 0x5d, 0x6b, 0xbb, 0xb9, 0xbb, 0xd9, 0xd3,
	0x16, 0x3d, 0xc5, 0x5e, 0xcf, 0xb0, 0xd7, 0xbb, 0xcf, 0xa3, 0xd4, 0x33, 0x8a, 0xe4, 0x26, 0x2c,
	0xe6, 0x4c, 0xb0, 0xfc, 0x05, 0x73, 0x6a, 0xdd, 0x85, 0xf3, 0x6d, 0x4a, 0x4d, 0xf7, 0x31, 0x90,
	0x77, 0x3c, 0x9c, 0x9d, 0xf3, 0x53, 0x58, 0x41, 0x0a, 0xfc, 0xd0, 0x48, 0x90, 0x98, 0xe6, 0xee,
	0x46, 0x4f, 0x67, 0x7b, 0x4a, 0xdb, 0x6b, 0x0d, 0x27, 0x97, 0xee, 0x9f, 0x36, 0xd4, 0x94, 0x82,
	0x62, 0x55, 0xf2, 0x13, 0x96, 0x96, 0xf9, 0xc3, 0x05, 0x21, 0x50, 0x4b, 0x69, 0x62, 0x28, 0xf2,
	0xf0, 0x37, 0xe9, 0x42, 0x33, 0x64, 0x22, 0xc8, 0xa3, 0x4c, 0x65, 0x1f, 0x8f, 0x6c, 0x7b, 0x93,
	0x22, 0xb2, 0x05, 0xcd, 0x20, 0x67, 0x54, 0xf2, 0x1c, 0xc9, 0xaf, 0xa1, 0x06, 0x18, 0x91, 0xe2,
	0xff, 0x7f, 0xb0, 0x12, 0xf0, 0x54, 0xe6, 0x3c, 0x8e, 0x99, 0xd6, 0xa9, 0xa3, 0x4e, 0xeb, 0x9d,
	0x54, 0xa9, 0x5d, 0x83, 0xd6, 0xa1, 0x29, 0x32, 0x5f, 0x11, 0xef, 0x34, 0x50, 0x6b, 0xb9, 0x14,
	0x3e, 0x1d, 0x67, 0x8c, 0x3c, 0x80, 0xf5, 0x33, 0x25, 0x2c, 0x3a, 0x26, 0x59, 0x2e, 0x9c, 0xc5,
	0x29, 0x0e, 0xa6, 0x6a, 0xd5, 0x23, 0x87, 0x93, 0x4b, 0xd4, 0x57, 0x21, 0x19, 0x9a, 0x7d, 0x3c,
	0xba, 0x70, 0x96, 0xb0, 0xbc, 0x5a, 0x46, 0xfa, 0x14, 0x85, 0xe4, 0x39, 0xac, 0xc9, 0x91, 0x7f,
	0xc8, 0x98, 0x9f, 0xb1, 0x3c, 0x60, 0xa9, 0xa4, 0x47, 0xcc, 0xb1, 0x67, 0x2a, 0xa0, 0xb6, 0x1c,
	0x3d, 0x64, 0xec, 0xe0, 0x0c, 0x86, 0x7c, 0x05, 0xeb, 0x6c, 0x14, 0xc9, 0xf7, 0xd1, 0x61, 0x26,
	0xf4, 0x35, 0x05, 0x35, 0x8d, 0xbf, 0x05, 0x4d, 0x05, 0x4d, 0xc3, 0x30, 0x67, 0x42, 0x38, 0x4d,
	0x9d, 0x96, 0x43, 0xc6, 0xee, 0x69, 0x09, 0xb9, 0x05, 0x90, 0xd0, 0x91, 0x6f, 0x6a, 0x79, 0xb9,
	0xaa, 0x96, 0xed, 0x84, 0x8e, 0x9e, 0xe8, 0x72, 0xde, 0x87, 0x4b, 0x3c, 0x0f, 0x59, 0xee, 0x7f,
	0x5b, 0xd0, 0x54, 0x46, 0x72, 0xec, 0xc7, 0x51, 0x12, 0x49, 0xe1, 0xb4, 0xaa, 0x8a, 0x7b, 0x1d,
	0xed, 0x1e, 0x1b, 0xb3, 0x2f, 0xd0, 0x8a, 0x3c, 0x82, 0xa6, 0xa0, 0xa9, 0x82, 0xc9, 0xa9, 0x64,
	0xce, 0xca, 0x4c, 0x0c, 0x80, 0x86, 0xf0, 0xa8, 0x64, 0xe4, 0x18, 0x1c, 0x03, 0x98, 0xd0, 0xfc,
	0x28, 0x4a, 0x27, 0xf9, 0x6d, 0xcf, 0x84, 0x7e, 0x59, 0xe3, 0xed, 0x23, 0xdc, 0x04, 0xc9, 0x9f,
	0xc1, 0x4a, 0x50, 0xe4, 0x39, 0x4b, 0x65, 0xc9, 0xe3, 0x6a, 0x15, 0x8f, 0x2d, 0x63, 0x60, 0xb8,
	0x1c, 0x40, 0xbb, 0x44, 0x28, 0x5b, 0xc4, 0x5a, 0x15, 0x8b, 0xa5, 0x4f, 0x4f, 0x1b, 0x90, 0xaf,
	0x61, 0xab, 0xc4, 0xe0, 0x85, 0x0c, 0x78, 0xc2, 0xfc, 0x8c, 0x8e, 0x93, 0x49, 0x4c, 0x52, 0x85,
	0x79, 0xd5, 0x20, 0x3c, 0xd2, 0x00, 0x07, 0xda, 0xbe, 0xf4, 0xb0, 0x05, 0x4d, 0x1a, 0xc7, 0xfc,
	0xd4, 0x17, 0x2c, 0x8e, 0x85, 0xb3, 0xde, 0xb5, 0xb6, 0x97, 0x3c, 0x40, 0xd1, 0x13, 0x25, 0x21,
	0xff, 0x06, 0xa0, 0x71, 0x76, 0x4c, 0x7d, 0xf5, 0x05, 0x3a, 0x1b, 0xb8, 0x6f, 0xa3, 0x04, 0xfb,
	0xcd, 0x7f, 0x60, 0x79, 0x48, 0x65, 0x70, 0xec, 0x0f, 0x63, 0x1e, 0x9c, 0x08, 0xe7, 0x52, 0xd7,
	0xda, 0xae, 0x79, 0x4d, 0x94, 0x0d, 0x50, 0x44, 0xfe, 0x0f, 0xed, 0xf7, 0x82, 0x77, 0x2e, 0x77,
	0xad, 0xed, 0x05, 0x6f, 0x85, 0x4f, 0x85, 0xa4, 0x7a, 0x97, 0x90, 0xaa, 0x50, 0xfe, 0xa5, 0x7b,
	0x17, 0x2e, 0xa6, 0xfa, 0xbf, 0x33, 0xd5, 0xff, 0xdd, 0x1f, 0x2d, 0xb0, 0x07, 0x54, 0xb0, 0x47,
	0xaa, 0xf6, 0xf0, 0x28, 0x41, 0xc0, 0x8b, 0x54, 0x4e, 0xdc, 0x15, 0x60, 0x44, 0xaa, 0x0f, 0xed,
	0x40, 0x83, 0x26, 0x6a, 0x81, 0x7d, 0xf0, 0xfc, 0xfe, 0xae, 0x15, 0xc9, 0x55, 0xb0, 0x03, 0x9a,
	0x06, 0x2c, 0x56, 0xfd, 0x78, 0x41, 0x1f, 0xfe, 0x4c, 0xa0, 0x1a, 0x9b, 0x5e, 0xf8, 0x39, 0xa3,
	0x82, 0xa7, 0xa6, 0x45, 0x2e, 0x6b, 0xa1, 0x87, 0x32, 0xb7, 0x80, 0xa5, 0x41, 0x31, 0xd6, 0x21,
	0xf6, 0x01, 0x94, 0x2f, 0x1f, 0x3f, 0x16, 0x8c, 0xb0, 0xb9, 0xbb, 0x5a, 0xf6, 0xf7, 0xf2, 0x20,
	0x9e, 0x3d, 0x3c, 0x3b, 0x93, 0xf9, 0x94, 0xf1, 0x82, 0x13, 0xce, 0x7c, 0x55, 0xae, 0xd5, 0xa7,
	0x8c, 0x77, 0x99, 0x70, 0xef, 0x80, 0xad, 0x12, 0x38, 0x9b, 0x5f, 0xf7, 0x4b, 0xb0, 0x9f, 0x9c,
	0xd2, 0x6c, 0xc6, 0xa8, 0x37, 0x61, 0x49, 0x72, 0xdd, 0x7f, 0xcd, 0x95, 0xb3, 0x28, 0x39, 0x76,
	0x5e, 0xf7, 0x87, 0x1a, 0xd4, 0x07, 0xaa, 0x38, 0xce, 0xbb, 0xd7, 0x3f, 0x82, 0x55, 0x5d, 0x4e,
	0x7e, 0xce, 0x12, 0x1a, 0xa5, 0x51, 0x7a, 0x84, 0x38, 0x35, 0xaf, 0xad, 0xe5, 0x5e, 0x29, 0x56,
	0x8d, 0x3c, 0x65, 0x23, 0xe9, 0x67, 0xc5, 0x30, 0x8e, 0x02, 0x1f, 0x0b, 0x53, 0xdf, 0x65, 0x17,
	0x6f, 0xe4, 0x0a, 0xe8, 0x00, 0x71, 0xee, 0x29, 0x18, 0x72, 0x1f, 0x56, 0x25, 0x97, 0x34, 0xf6,
	0x87, 0xc5, 0xd8, 0x37, 0x95, 0x53, 0xab, 0xaa, 0x9c, 0x15, 0x34, 0x19, 0x14, 0xe3, 0x7b, 0xba,
	0x82, 0x1e, 0xc0, 0x9a, 0x06, 0x51, 0x1f, 0x58, 0x89, 0x52, 0xaf, 0x42, 0x69, 0xa3, 0x8d, 0x4a,
	0xa0, 0x81, 0xb9, 0x05, 0xa0, 0xa2, 0x30, 0x85, 0xd0, 0xa8, 0x2c, 0x84, 0x61, 0x31, 0xd6, 0x85,
	0x40, 0x6e, 0x43, 0x13, 0x5d, 0x1b, 0xd3, 0xc5, 0x2a, 0x53, 0x50, 0xda, 0xc6, 0xf6, 0x1a, 0xd4,
	0x86, 0xc5, 0x58, 0xdf, 0xa1, 0xcd, 0xdd, 0x76, 0x99, 0x73, 0x53, 0xce, 0x1e, 0x6e, 0x92, 0xeb,
	0x50, 0xd7, 0xcd, 0xc3, 0x46, 0xad, 0xb2, 0x32, 0xce, 0xaa, 0xcf, 0xd3, 0xdb, 0xe4, 0xbf, 0x50,
	0x13, 0xa7, 0x34, 0x73, 0x60, 0x5a, 0xad, 0x2c, 0x33, 0x0f, 0x77, 0xdd, 0x9f, 0xe6, 0xa1, 0xa5,
	0xa7, 0x23, 0x73, 0x02, 0xd5, 0x48, 0x69, 0xf8, 0x4d, 0x21, 0x24, 0x0b, 0xcb, 0x5e, 0x6c, 0x55,
	0x66, 0xa1, 0xb4, 0x30, 0xcd, 0x78, 0x07, 0x1a, 0x1f, 0xfa, 0x0d, 0x19, 0x45, 0xb2, 0x0b, 0x8b,
	0x7a, 0x44, 0x10, 0xce, 0x42, 0xa5, 0x0d, 0xce, 0x00, 0x82, 0xdc, 0x81, 0x65, 0x9d, 0x6c, 0xe3,
	0xac, 0x72, 0x26, 0x6c, 0xa2, 0xba, 0x61, 0xfb, 0x16, 0x80, 0xb6, 0x46, 0xa7, 0xf5, 0xca, 0x1c,
	0xa3, 0xb2, 0xf2, 0xeb, 0xfe, 0x31, 0x0f, 0x6d, 0x24, 0x4d, 0x91, 0xee, 0x31, 0x59, 0xe4, 0xe9,
	0x3f, 0x42, 0x1b, 0x8e, 0xb7, 0x0a, 0xed, 0x03, 0x78, 0x2b, 0x35, 0x67, 0x22, 0xee, 0x13, 0xb0,
	0xcb, 0x99, 0xe9, 0x03, 0x58, 0x5b, 0x32, 0x43, 0x91, 0x20, 0x77, 0xa1, 0xa5, 0x29, 0x2b, 0xc3,
	0xac, 0x64, 0x4d, 0x27, 0xc8, 0x33, 0xb1, 0x4e, 0x53, 0xde, 0xb8, 0x00, 0xe5, 0xdf, 0x59, 0x25,
	0xe5, 0xa7, 0x34, 0x33, 0x94, 0xff, 0x2d, 0x9a, 0x4a, 0xc2, 0xcf, 0x8b, 0x66, 0xfe, 0x02, 0xd1,
	0xfc, 0x62, 0x99, 0x37, 0x05, 0x76, 0xae, 0x7d, 0x3a, 0x8a, 0x92, 0x22, 0x11, 0x24, 0x82, 0x4d,
	0x9c, 0x04, 0xc7, 0x42, 0xb2, 0x44, 0x37, 0x47, 0x3f, 0x4a, 0xd5, 0x04, 0x2f, 0x98, 0x6e, 0xba,
	0x17, 0x1f, 0x98, 0xd4, 0xb4, 0x88, 0x78, 0xe8, 0xea, 0x73, 0x83, 0x46, 0x9e, 0xc1, 0xea, 0xfb,
	0xae, 0x66, 0x7c, 0x91, 0xad, 0x4c, 0x7b, 0x70, 0x6f, 0x43, 0x03, 0x07, 0x7c, 0x41, 0x3e, 0x86,
	0x0d, 0x33, 0xf6, 0x84, 0x38, 0x8e, 0x94, 0x23, 0xbe, 0x7e, 0x41, 0x92, 0x72, 0x4f, 0x0d, 0x26,
	0x7a, 0xce, 0x1f, 0x3c, 0x7b, 0xf9, 0xa6, 0x63, 0xbd, 0x7a, 0xd3, 0xb1, 0x7e, 0x7b, 0xd3, 0xb1,
	0xbe, 0x7f, 0xdb, 0x99, 0x7b, 0xf5, 0xb6, 0x33, 0xf7, 0xf3, 0xdb, 0xce, 0xdc, 0xf3, 0xbb, 0x13,
	0xd1, 0x44, 0x23, 0x7e, 0xc8, 0x8b, 0x34, 0xa4, 0xea, 0x31, 0xa1, 0x56, 0x37, 0xf0, 0x9a, 0x09,
	0x8e, 0x69, 0x94, 0xf6, 0x47, 0xfa, 0xb5, 0xdd, 0x8f, 0x52, 0xc9, 0xf2, 0x94, 0xc6, 0x3a, 0xd2,
	0x61, 0x03, 0x1f, 0xd0, 0x37, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x57, 0x8d, 0x16, 0x92,
	0x0f, 0x00, 0x00,
}

func (m *FunctionParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FunctionParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FunctionParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Param) > 0 {
		i -= len(m.Param)
		copy(dAtA[i:], m.Param)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.Param)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBonds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBonds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBonds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bonds) > 0 {
		for iNdEx := len(m.Bonds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Bonds[iNdEx])
			copy(dAtA[i:], m.Bonds[iNdEx])
			i = encodeVarintBonds(dAtA, i, uint64(len(m.Bonds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BondsDetailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondsDetailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondsDetailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reserve) > 0 {
		for iNdEx := len(m.Reserve) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reserve[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Supply != nil {
		{
			size, err := m.Supply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBonds(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.SpotPrice.Size()
		i -= size
		if _, err := m.SpotPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBondsDetailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBondsDetailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBondsDetailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BondsDetailed) > 0 {
		for iNdEx := len(m.BondsDetailed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BondsDetailed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bond) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bond) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.OutcomePayment != 0 {
		i = encodeVarintBonds(dAtA, i, uint64(m.OutcomePayment))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.BatchBlocks != 0 {
		i = encodeVarintBonds(dAtA, i, uint64(m.BatchBlocks))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.AlphaBond {
		i--
		if m.AlphaBond {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.AllowSells {
		i--
		if m.AllowSells {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.CurrentOutcomePaymentReserve) > 0 {
		for iNdEx := len(m.CurrentOutcomePaymentReserve) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentOutcomePaymentReserve[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.CurrentReserve) > 0 {
		for iNdEx := len(m.CurrentReserve) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentReserve[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.CurrentSupply != nil {
		{
			size, err := m.CurrentSupply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBonds(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	{
		size := m.SanityMarginPercentage.Size()
		i -= size
		if _, err := m.SanityMarginPercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size := m.SanityRate.Size()
		i -= size
		if _, err := m.SanityRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if len(m.OrderQuantityLimits) > 0 {
		for iNdEx := len(m.OrderQuantityLimits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderQuantityLimits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.MaxSupply != nil {
		{
			size, err := m.MaxSupply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBonds(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.FeeAddress) > 0 {
		i -= len(m.FeeAddress)
		copy(dAtA[i:], m.FeeAddress)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.FeeAddress)))
		i--
		dAtA[i] = 0x5a
	}
	{
		size := m.ExitFeePercentage.Size()
		i -= size
		if _, err := m.ExitFeePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.TxFeePercentage.Size()
		i -= size
		if _, err := m.TxFeePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.ReserveTokens) > 0 {
		for iNdEx := len(m.ReserveTokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReserveTokens[iNdEx])
			copy(dAtA[i:], m.ReserveTokens[iNdEx])
			i = encodeVarintBonds(dAtA, i, uint64(len(m.ReserveTokens[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.FunctionParameters) > 0 {
		for iNdEx := len(m.FunctionParameters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FunctionParameters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.FunctionType) > 0 {
		i -= len(m.FunctionType)
		copy(dAtA[i:], m.FunctionType)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.FunctionType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ControllerDid) > 0 {
		i -= len(m.ControllerDid)
		copy(dAtA[i:], m.ControllerDid)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.ControllerDid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CreatorDid) > 0 {
		i -= len(m.CreatorDid)
		copy(dAtA[i:], m.CreatorDid)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.CreatorDid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaseOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CancelReason) > 0 {
		i -= len(m.CancelReason)
		copy(dAtA[i:], m.CancelReason)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.CancelReason)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cancelled {
		i--
		if m.Cancelled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBonds(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountDid) > 0 {
		i -= len(m.AccountDid)
		copy(dAtA[i:], m.AccountDid)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.AccountDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuyOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuyOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxPrices) > 0 {
		for iNdEx := len(m.MaxPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BaseOrder != nil {
		{
			size, err := m.BaseOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBonds(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SellOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SellOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SellOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseOrder != nil {
		{
			size, err := m.BaseOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBonds(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwapOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToToken) > 0 {
		i -= len(m.ToToken)
		copy(dAtA[i:], m.ToToken)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.ToToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.BaseOrder != nil {
		{
			size, err := m.BaseOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBonds(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Batch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Batch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Batch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Swap) > 0 {
		for iNdEx := len(m.Swap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Swap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Sells) > 0 {
		for iNdEx := len(m.Sells) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sells[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Buys) > 0 {
		for iNdEx := len(m.Buys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Buys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SellPrices) > 0 {
		for iNdEx := len(m.SellPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BuyPrices) > 0 {
		for iNdEx := len(m.BuyPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TotalSellAmount != nil {
		{
			size, err := m.TotalSellAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBonds(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TotalBuyAmount != nil {
		{
			size, err := m.TotalBuyAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBonds(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.NextPublicAlpha.Size()
		i -= size
		if _, err := m.NextPublicAlpha.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.BlocksRemaining != 0 {
		i = encodeVarintBonds(dAtA, i, uint64(m.BlocksRemaining))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBuyPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuyPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuyPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalFees) > 0 {
		for iNdEx := len(m.TotalFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TotalPrices) > 0 {
		for iNdEx := len(m.TotalPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TxFees) > 0 {
		for iNdEx := len(m.TxFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Prices) > 0 {
		for iNdEx := len(m.Prices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AdjustedSupply != nil {
		{
			size, err := m.AdjustedSupply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBonds(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySellReturn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySellReturn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySellReturn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalFees) > 0 {
		for iNdEx := len(m.TotalFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TotalReturns) > 0 {
		for iNdEx := len(m.TotalReturns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalReturns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ExitFees) > 0 {
		for iNdEx := len(m.ExitFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExitFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TxFees) > 0 {
		for iNdEx := len(m.TxFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Returns) > 0 {
		for iNdEx := len(m.Returns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Returns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AdjustedSupply != nil {
		{
			size, err := m.AdjustedSupply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBonds(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySwapReturn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySwapReturn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySwapReturn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalFees) > 0 {
		for iNdEx := len(m.TotalFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TotalReturns != nil {
		{
			size, err := m.TotalReturns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBonds(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAlphaMaximums) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAlphaMaximums) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAlphaMaximums) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxSystemAlpha.Size()
		i -= size
		if _, err := m.MaxSystemAlpha.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.MaxSystemAlphaIncrease.Size()
		i -= size
		if _, err := m.MaxSystemAlphaIncrease.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReservedBondTokens) > 0 {
		for iNdEx := len(m.ReservedBondTokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReservedBondTokens[iNdEx])
			copy(dAtA[i:], m.ReservedBondTokens[iNdEx])
			i = encodeVarintBonds(dAtA, i, uint64(len(m.ReservedBondTokens[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintBonds(dAtA []byte, offset int, v uint64) int {
	offset -= sovBonds(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FunctionParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovBonds(uint64(l))
	return n
}

func (m *QueryBonds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bonds) > 0 {
		for _, s := range m.Bonds {
			l = len(s)
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	return n
}

func (m *BondsDetailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondDid)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	l = m.SpotPrice.Size()
	n += 1 + l + sovBonds(uint64(l))
	if m.Supply != nil {
		l = m.Supply.Size()
		n += 1 + l + sovBonds(uint64(l))
	}
	if len(m.Reserve) > 0 {
		for _, e := range m.Reserve {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	return n
}

func (m *QueryBondsDetailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BondsDetailed) > 0 {
		for _, e := range m.BondsDetailed {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	return n
}

func (m *Bond) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	l = len(m.CreatorDid)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	l = len(m.ControllerDid)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	l = len(m.FunctionType)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	if len(m.FunctionParameters) > 0 {
		for _, e := range m.FunctionParameters {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	if len(m.ReserveTokens) > 0 {
		for _, s := range m.ReserveTokens {
			l = len(s)
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	l = m.TxFeePercentage.Size()
	n += 1 + l + sovBonds(uint64(l))
	l = m.ExitFeePercentage.Size()
	n += 1 + l + sovBonds(uint64(l))
	l = len(m.FeeAddress)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	if m.MaxSupply != nil {
		l = m.MaxSupply.Size()
		n += 1 + l + sovBonds(uint64(l))
	}
	if len(m.OrderQuantityLimits) > 0 {
		for _, e := range m.OrderQuantityLimits {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	l = m.SanityRate.Size()
	n += 1 + l + sovBonds(uint64(l))
	l = m.SanityMarginPercentage.Size()
	n += 1 + l + sovBonds(uint64(l))
	if m.CurrentSupply != nil {
		l = m.CurrentSupply.Size()
		n += 2 + l + sovBonds(uint64(l))
	}
	if len(m.CurrentReserve) > 0 {
		for _, e := range m.CurrentReserve {
			l = e.Size()
			n += 2 + l + sovBonds(uint64(l))
		}
	}
	if len(m.CurrentOutcomePaymentReserve) > 0 {
		for _, e := range m.CurrentOutcomePaymentReserve {
			l = e.Size()
			n += 2 + l + sovBonds(uint64(l))
		}
	}
	if m.AllowSells {
		n += 3
	}
	if m.AlphaBond {
		n += 3
	}
	if m.BatchBlocks != 0 {
		n += 2 + sovBonds(uint64(m.BatchBlocks))
	}
	if m.OutcomePayment != 0 {
		n += 2 + sovBonds(uint64(m.OutcomePayment))
	}
	l = len(m.State)
	if l > 0 {
		n += 2 + l + sovBonds(uint64(l))
	}
	l = len(m.BondDid)
	if l > 0 {
		n += 2 + l + sovBonds(uint64(l))
	}
	return n
}

func (m *BaseOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountDid)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovBonds(uint64(l))
	}
	if m.Cancelled {
		n += 2
	}
	l = len(m.CancelReason)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	return n
}

func (m *BuyOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseOrder != nil {
		l = m.BaseOrder.Size()
		n += 1 + l + sovBonds(uint64(l))
	}
	if len(m.MaxPrices) > 0 {
		for _, e := range m.MaxPrices {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	return n
}

func (m *SellOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseOrder != nil {
		l = m.BaseOrder.Size()
		n += 1 + l + sovBonds(uint64(l))
	}
	return n
}

func (m *SwapOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseOrder != nil {
		l = m.BaseOrder.Size()
		n += 1 + l + sovBonds(uint64(l))
	}
	l = len(m.ToToken)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	return n
}

func (m *Batch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondDid)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	if m.BlocksRemaining != 0 {
		n += 1 + sovBonds(uint64(m.BlocksRemaining))
	}
	l = m.NextPublicAlpha.Size()
	n += 1 + l + sovBonds(uint64(l))
	if m.TotalBuyAmount != nil {
		l = m.TotalBuyAmount.Size()
		n += 1 + l + sovBonds(uint64(l))
	}
	if m.TotalSellAmount != nil {
		l = m.TotalSellAmount.Size()
		n += 1 + l + sovBonds(uint64(l))
	}
	if len(m.BuyPrices) > 0 {
		for _, e := range m.BuyPrices {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	if len(m.SellPrices) > 0 {
		for _, e := range m.SellPrices {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	if len(m.Buys) > 0 {
		for _, e := range m.Buys {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	if len(m.Sells) > 0 {
		for _, e := range m.Sells {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	if len(m.Swap) > 0 {
		for _, e := range m.Swap {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	return n
}

func (m *QueryBuyPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdjustedSupply != nil {
		l = m.AdjustedSupply.Size()
		n += 1 + l + sovBonds(uint64(l))
	}
	if len(m.Prices) > 0 {
		for _, e := range m.Prices {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	if len(m.TxFees) > 0 {
		for _, e := range m.TxFees {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	if len(m.TotalPrices) > 0 {
		for _, e := range m.TotalPrices {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	if len(m.TotalFees) > 0 {
		for _, e := range m.TotalFees {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	return n
}

func (m *QuerySellReturn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdjustedSupply != nil {
		l = m.AdjustedSupply.Size()
		n += 1 + l + sovBonds(uint64(l))
	}
	if len(m.Returns) > 0 {
		for _, e := range m.Returns {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	if len(m.TxFees) > 0 {
		for _, e := range m.TxFees {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	if len(m.ExitFees) > 0 {
		for _, e := range m.ExitFees {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	if len(m.TotalReturns) > 0 {
		for _, e := range m.TotalReturns {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	if len(m.TotalFees) > 0 {
		for _, e := range m.TotalFees {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	return n
}

func (m *QuerySwapReturn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalReturns != nil {
		l = m.TotalReturns.Size()
		n += 1 + l + sovBonds(uint64(l))
	}
	if len(m.TotalFees) > 0 {
		for _, e := range m.TotalFees {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	return n
}

func (m *QueryAlphaMaximums) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MaxSystemAlphaIncrease.Size()
	n += 1 + l + sovBonds(uint64(l))
	l = m.MaxSystemAlpha.Size()
	n += 1 + l + sovBonds(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReservedBondTokens) > 0 {
		for _, s := range m.ReservedBondTokens {
			l = len(s)
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	return n
}

func sovBonds(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBonds(x uint64) (n int) {
	return sovBonds(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FunctionParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FunctionParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FunctionParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBonds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBonds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBonds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bonds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bonds = append(m.Bonds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondsDetailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondsDetailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondsDetailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpotPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Supply == nil {
				m.Supply = &types.Coin{}
			}
			if err := m.Supply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserve = append(m.Reserve, &types.Coin{})
			if err := m.Reserve[len(m.Reserve)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBondsDetailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBondsDetailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBondsDetailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondsDetailed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondsDetailed = append(m.BondsDetailed, &BondsDetailed{})
			if err := m.BondsDetailed[len(m.BondsDetailed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FunctionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FunctionParameters = append(m.FunctionParameters, &FunctionParam{})
			if err := m.FunctionParameters[len(m.FunctionParameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveTokens = append(m.ReserveTokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFeePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxFeePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitFeePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExitFeePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxSupply == nil {
				m.MaxSupply = &types.Coin{}
			}
			if err := m.MaxSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderQuantityLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderQuantityLimits = append(m.OrderQuantityLimits, &types.Coin{})
			if err := m.OrderQuantityLimits[len(m.OrderQuantityLimits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SanityRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SanityRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SanityMarginPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SanityMarginPercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentSupply == nil {
				m.CurrentSupply = &types.Coin{}
			}
			if err := m.CurrentSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentReserve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentReserve = append(m.CurrentReserve, &types.Coin{})
			if err := m.CurrentReserve[len(m.CurrentReserve)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentOutcomePaymentReserve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentOutcomePaymentReserve = append(m.CurrentOutcomePaymentReserve, &types.Coin{})
			if err := m.CurrentOutcomePaymentReserve[len(m.CurrentOutcomePaymentReserve)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowSells", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowSells = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlphaBond", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AlphaBond = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchBlocks", wireType)
			}
			m.BatchBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutcomePayment", wireType)
			}
			m.OutcomePayment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutcomePayment |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancelled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cancelled = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseOrder == nil {
				m.BaseOrder = &BaseOrder{}
			}
			if err := m.BaseOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxPrices = append(m.MaxPrices, &types.Coin{})
			if err := m.MaxPrices[len(m.MaxPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SellOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SellOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SellOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseOrder == nil {
				m.BaseOrder = &BaseOrder{}
			}
			if err := m.BaseOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseOrder == nil {
				m.BaseOrder = &BaseOrder{}
			}
			if err := m.BaseOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Batch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Batch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Batch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksRemaining", wireType)
			}
			m.BlocksRemaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksRemaining |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPublicAlpha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NextPublicAlpha.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBuyAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalBuyAmount == nil {
				m.TotalBuyAmount = &types.Coin{}
			}
			if err := m.TotalBuyAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSellAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalSellAmount == nil {
				m.TotalSellAmount = &types.Coin{}
			}
			if err := m.TotalSellAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyPrices = append(m.BuyPrices, &types.Coin{})
			if err := m.BuyPrices[len(m.BuyPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellPrices = append(m.SellPrices, &types.Coin{})
			if err := m.SellPrices[len(m.SellPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buys = append(m.Buys, &BuyOrder{})
			if err := m.Buys[len(m.Buys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sells = append(m.Sells, &SellOrder{})
			if err := m.Sells[len(m.Sells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Swap = append(m.Swap, &SwapOrder{})
			if err := m.Swap[len(m.Swap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuyPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuyPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuyPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdjustedSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdjustedSupply == nil {
				m.AdjustedSupply = &types.Coin{}
			}
			if err := m.AdjustedSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prices = append(m.Prices, &types.Coin{})
			if err := m.Prices[len(m.Prices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxFees = append(m.TxFees, &types.Coin{})
			if err := m.TxFees[len(m.TxFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalPrices = append(m.TotalPrices, &types.Coin{})
			if err := m.TotalPrices[len(m.TotalPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalFees = append(m.TotalFees, &types.Coin{})
			if err := m.TotalFees[len(m.TotalFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySellReturn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySellReturn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySellReturn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdjustedSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdjustedSupply == nil {
				m.AdjustedSupply = &types.Coin{}
			}
			if err := m.AdjustedSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Returns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Returns = append(m.Returns, &types.Coin{})
			if err := m.Returns[len(m.Returns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxFees = append(m.TxFees, &types.Coin{})
			if err := m.TxFees[len(m.TxFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExitFees = append(m.ExitFees, &types.Coin{})
			if err := m.ExitFees[len(m.ExitFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalReturns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalReturns = append(m.TotalReturns, &types.Coin{})
			if err := m.TotalReturns[len(m.TotalReturns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalFees = append(m.TotalFees, &types.Coin{})
			if err := m.TotalFees[len(m.TotalFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySwapReturn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySwapReturn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySwapReturn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalReturns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalReturns == nil {
				m.TotalReturns = &types.Coin{}
			}
			if err := m.TotalReturns.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalFees = append(m.TotalFees, &types.Coin{})
			if err := m.TotalFees[len(m.TotalFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAlphaMaximums) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAlphaMaximums: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAlphaMaximums: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSystemAlphaIncrease", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSystemAlphaIncrease.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSystemAlpha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSystemAlpha.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedBondTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservedBondTokens = append(m.ReservedBondTokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBonds(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBonds
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBonds
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBonds
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBonds        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBonds          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBonds = fmt.Errorf("proto: unexpected end of group")
)
